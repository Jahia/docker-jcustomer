---

############################
# Workflow summary :
# Build jCustomer images and push them on a private repo for test purpose
# Pull jCustomer images and test them automatically
# Ask for human validation before pushing images to the public repo
############################

version: 2.1

orbs:
  docker: circleci/docker@1.0.1
  slack: circleci/slack@3.4.2
  anchore: anchore/anchore-engine@1.8.1

commands:
  build_jcustomer:
    description: "Build jCustomer images and push them on a private repo for test purpose"
    parameters:
      repo:
        type: string
        default: jahia/jcustomer_test
      jver:
        type: string
      base_url:
        type: string
      tag_suffix:
        type: string
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/build:
          step-name: "Build << parameters.repo >>:<< parameters.jver >><< parameters.tag_suffix >>"
          tag: "<< parameters.jver >>"
          image: "<< parameters.repo >>"
          dockerfile: Dockerfile
          extra_build_args:
            '
            --build-arg RELEASE_URL="<< parameters.base_url >>"
            --no-cache
            '
      - docker/push:
          step-name: "Push to test repo << parameters.repo >>:<< parameters.jver >>"
          image: "<< parameters.repo >>"
          tag: "<< parameters.jver >>"
      - slack/status:
          failure_message: |
            ':alert: Building jcustomer:<< parameters.jver >><< parameters.tag_suffix >> has failed !'
          success_message: |
            ':building_construction: Building jcustomer:<< parameters.jver >><< parameters.tag_suffix >> successfully.'

  test_jcustomer:
    description: "Pull jCustomer images from private repo and test them"
    parameters:
      jver:
        type: string
      tag_suffix:
        type: string
    steps:
      - run:
          name: start jcustomer entrypoint
          background: true
          command: |
            set +eo pipefail
            env
            free -m
            /entrypoint.sh
      - run:
          name: healtcheck test and push
          command: |
            set +eo pipefail
            for i in {1..666}; do
              echo "iteration $i/666..."
              curl "http://localhost:8181/context.json?sessionId=abricot" -s | python -m json.tool
              if [ $? -eq 0 ]; then
              echo "Jcustomer send a json, that's ok"
                exit 0
              fi
              echo "Not ready yet"
              echo
              sleep 1
            done
            echo "you are a failure"
            exit 1
      - slack/status:
          failure_message: |
            ':alert: Testing jcustomer:<< parameters.jver >><< parameters.tag_suffix >> has failed !'
          success_message: |
            ':heartpulse: Testing jcustomer:<< parameters.jver >><< parameters.tag_suffix >> successfully.'

  publish_image:
    description: "Push tested image to public repo"
    parameters:
      repo:
        type: string
        default: jahia/jcustomer
      repo_source:
        type: string
        default: jahia/jcustomer_test
      jver:
        type: string
      tag_suffix:
        type: string
      latest:
        type: boolean
        default: false
    steps:
      - setup_remote_docker
      - checkout
      - docker/check
      - docker/pull:
          images: "<< parameters.repo_source >>:<< parameters.jver >>"
      - run:
          name: "set final name to image"
          command: |
            docker tag \
              << parameters.repo_source >>:<< parameters.jver >> \
              << parameters.repo >>:<< parameters.jver >><< parameters.tag_suffix >>
      - docker/push:
          step-name: "Push to final repo << parameters.repo >>:<< parameters.jver >><< parameters.tag_suffix >>"
          image: "<< parameters.repo >>"
          tag: "<< parameters.jver >><< parameters.tag_suffix >>"
      - when:
          condition:
            and:
              -  << parameters.latest >>
              - equal: [ "<< parameters.tag_suffix >>", "" ]
          steps:
            - run:
                name: "set latest tag to image"
                command: |
                  docker tag \
                    << parameters.repo >>:<< parameters.jver >><< parameters.tag_suffix >> \
                    << parameters.repo >>:latest
            - docker/push:
                step-name: "Pushing << parameters.repo >>:latest"
                image: "<< parameters.repo >>"
                tag: "latest"
      - slack/status:
          failure_message: |
            ':alert: Publishing jcustomer:<< parameters.jver >><< parameters.tag_suffix >> has failed !'
          success_message: |
            ':whale2: Publishing jcustomer:<< parameters.jver >><< parameters.tag_suffix >> successfully.'

  scan_image:
    description: "Pull and scan a docker image"
    parameters:
      image_name:
        type: string
      registry_user:
        type: string
      registry_pass:
        type: string
      slack_channel:
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - anchore/start_engine
      - anchore/add_private_registry:
          registry_name: "docker.io"
          registry_user: "<< parameters.registry_user >>"
          registry_pass: "<< parameters.registry_pass >>"
      - anchore/analyze_image:
          image_name: "<< parameters.image_name >>"
          timeout: "600"
      - anchore/policy_evaluation:
          image_name: "<< parameters.image_name >>"
          policy_failure: true
      - slack/status:
          channel: "<< parameters.slack_channel >>"
          failure_message: |
            ':alert: Scanning << parameters.image_name >> has failed'
          success_message: |
            ':mag: Scanned  << parameters.image_name >> successfully'
      - anchore/parse_reports
      - store_artifacts:
          path: anchore-reports

######### commun stuff
tag_suffix: &tag_suffix
  #############################
  #  /!\ /!\ /!\ /!\ /!\ /!\  #
  #   Set something here if   #
  # you do not want to update #
  #      official images.     #
  #  /!\ /!\ /!\ /!\ /!\ /!\  #
  #############################
  # use value "" in order to build official images
  # tag_suffix: "_<< pipeline.git.branch >>"
  tag_suffix: ""
filters: &filters
  filters:
    branches:
      only: master
job_options: &job_options
  context:
    - cloud-docker-hub
    - cloud-slack
  <<: *filters
es_env: &es_env
  environment:
    discovery.type: single-node
    xpack.security.enabled: "false"
es_container: &es_container
  - image: elasticsearch:7.6.1
    <<: *es_env
jc_env: &jc_env
  environment:
    unomi_env_var_UNOMI_ELASTICSEARCH_ADDRESSES: localhost:9200
    unomi_env_var_UNOMI_ELASTICSEARCH_CLUSTERNAME: elasticsearch-cluster
    unomi_env_var_UNOMI_CLUSTER_INTERNAL_ADDRESS: https://localhost:9443
    unomi_env_var_UNOMI_CLUSTER_PUBLIC_ADDRESS: http://localhost:8181
    unomi_env_var_KARAF_OPTS: "-Dunomi.autoStart=true"


jobs:
  build_151:
    executor: docker/docker
    steps:
      - build_jcustomer:
          jver: "1.5.1"
          base_url: "https://downloads.jahia.com/downloads/jahia/jcustomer/jcustomer-1.5.1.tar.gz"
          <<: *tag_suffix
  test_151:
    docker:
      - image: jahia/jcustomer_test:1.5.1
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
        <<: *jc_env
      - <<: *es_container
    steps:
      - test_jcustomer:
          jver: "1.5.1"
          <<: *tag_suffix

  scan_jcustomer_image:
    executor: anchore/anchore_engine
    parameters:
      image:
        type: string
      slack_channel:
        type: string
    steps:
      - run:
          command: apk update; apk add bash curl
      - scan_image:
          image_name: "<< parameters.image >>"
          registry_user: "$DOCKER_LOGIN"
          registry_pass: "$DOCKER_PASSWORD"
          slack_channel: "<< parameters.slack_channel >>"

  publish_151:
    executor: docker/docker
    steps:
      - publish_image:
          jver: "1.5.1"
          latest: true
          <<: *tag_suffix


workflows:
  version: 2
  build_all_jcustomer:
    jobs:
      - build_151:
          <<: *job_options
      - test_151:
          <<: *job_options
          requires:
            - build_151
      - scan_jcustomer_image:
         <<: *job_options
         image: jahia/jcustomer_test:1.5.1
         slack_channel: team-cloud-notif
         requires:
           - build_151

      - human_validation:
          type: approval
          requires:
            - test_151
            - scan_jcustomer_image
          <<: *job_options
      - slack/approval-notification:
          include_project_field: true
          message: ":female-police-officer: CircleCI requests your approval: please confirm that images are ready to be pushed in public repository..."
          requires:
            - test_151
            - scan_jcustomer_image
          <<: *job_options

      - publish_151:
          <<: *job_options
          requires:
            - human_validation


  weekly_scan:
    triggers:
      - schedule:
          cron: "0 1 * * 0"
          <<: *filters
    jobs:
      - scan_jcustomer_image:
          <<: *job_options
          image: jahia/jcustomer:1.5.1
          slack_channel: team-cloud-security
